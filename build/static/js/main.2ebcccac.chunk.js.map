{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","color","innerMain","margin","image","backgroundImage","backgroundRepeat","backgroundColor","backgroundSize","backgroundPosition","maxHeight","avatar","spacing","form","width","marginTop","submit","typography","fontSize","errorMessage","infoPaperContainer","overflow","info","height","padding","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","saml","setSaml","deflatedSaml","setDeflatedSaml","decodedSaml","setDecodedSaml","React","anchorEl","setAnchorEl","samlError","setSamlError","open","id","undefined","decode","utf8ToUtf16decoder","TextDecoder","fatal","saml_uri_decoded","decodeURIComponent","saml_base64_decoded","atob","saml_inflated","pako","inflateRaw","utf16Decoded","Container","className","Grid","container","component","direction","item","xs","justify","style","flex","Avatar","noValidate","onSubmit","event","preventDefault","e","msg","JSON","stringify","console","error","currentTarget","Typography","variant","align","paddingBottom","TextField","required","fullWidth","label","name","value","autoFocus","rowsMax","multiline","fontFamily","onChange","target","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Button","type","Box","border","borderRadius","borderColor","minHeight","maxWidth","marginBottom","textAlign","whiteSpace","textOverflow","language","docco","customStyle","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ebcccac.chunk.js","sourcesContent":["import React, { useState, lazy, Suspense } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Base64 from \"crypto-js/enc-base64\";\nimport Utf8 from \"crypto-js/enc-utf8\";\nimport pako from \"pako\";\nimport prettyData from \"pretty-data\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { ghcolors } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"flex-start\",\n    color: \"#2E4355\"\n  },\n  innerMain: {\n    display: \"flex\",\n    margin: \"0\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    color: \"#2E4355\"\n  },\n  image: {\n    backgroundImage:\n      \"url(https://pingidentity.com/content/dam/ping-6-2-assets/open-graph-images/2019/P14C-Build-OG.png)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor: \"#576877\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    maxHeight: \"20%\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#2E4355\"\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: \"0\"\n  },\n  submit: {\n    backgroundColor: \"#2E4355\",\n    margin: theme.spacing(3, 0, 2)\n  },\n  typography: {\n    color: \"#2E4355\",\n    fontSize: \"1%\"\n  },\n  errorMessage: {\n    color: \"red\"\n  },\n  infoPaperContainer: {\n    maxHeight: \"100%\",\n    overflow: \"auto\"\n  },\n  info: {\n    height: \"100%\",\n    maxHeight: \"100%\",\n    color: \"#2E4355\",\n    margin: \"0\",\n    padding: \"0\"\n  }\n}));\n\nexport default function App() {\n  // Use the above styles.\n  const classes = useStyles();\n\n  // State variables and setters.\n  const [saml, setSaml] = useState(\"\");\n  const [deflatedSaml, setDeflatedSaml] = useState(\"\");\n  const [decodedSaml, setDecodedSaml] = useState(\"\");\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [samlError, setSamlError] = React.useState(null);\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"popover\" : undefined;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    try {\n      decode();\n    } catch (e) {\n      // Gets the reason for failure.\n      let msg = JSON.stringify(e);\n      console.error(e);\n      console.error(msg);\n      setSamlError(msg);\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const handleSAMLChange = event => {\n    event.preventDefault();\n    setSaml(event.target.value);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const encode = samlRequest => {\n    const array = Utf8.parse(samlRequest);\n    const base64 = Base64.stringify(array);\n    const urlEncoded = encodeURIComponent(base64);\n  };\n\n  const decode = () => {\n    let utf8ToUtf16decoder = new TextDecoder(\"utf-8\", { fatal: true });\n\n    // uri decode\n    const saml_uri_decoded = decodeURIComponent(saml);\n    // base64 decode\n    const saml_base64_decoded = atob(saml_uri_decoded);\n    // this is the deflated xml\n    setDeflatedSaml(saml_base64_decoded);\n    // inflate\n    const saml_inflated = pako.inflateRaw(saml_base64_decoded);\n    // currently a utf8 integer array, decode as utf16\n    const utf16Decoded = utf8ToUtf16decoder.decode(saml_inflated);\n    // we now have a decoded saml request, update state\n    setDecodedSaml(utf16Decoded);\n  };\n\n  return (\n    <Container spacing={0} className={classes.root}>\n      <Grid\n        container\n        display=\"flex\"\n        component=\"main\"\n        className={classes.innerMain}\n        direction=\"column\"\n      >\n        <Grid\n          item\n          xs={12}\n          justify=\"center\"\n          style={{\n            flex: \"1 1 1\"\n          }}\n        >\n          <Avatar className={classes.avatar}>\n            <LockOpenIcon />\n          </Avatar>\n        </Grid>\n\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"space-between\"\n          alignItems=\"stretch\"\n          xs={12}\n          style={{ flex: \"10 1 auto\" }}\n        >\n          <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <Grid item xs={12} style={{ flex: \"10 1 auto\" }}>\n              <Typography\n                component=\"h5\"\n                variant=\"h5\"\n                align=\"left\"\n                style={{\n                  paddingBottom: \"1rem\"\n                }}\n              >\n                SAML Request{\" \"}\n                <Typography variant=\"body1\" style={{ display: \"inline-flex\" }}>\n                  (deflated, utf8 encoded, uri encoded)\n                </Typography>\n              </Typography>\n              {/* JWT input field */}\n              <TextField\n                variant=\"outlined\"\n                margin=\"none\"\n                required\n                fullWidth\n                id=\"saml\"\n                label=\"SAML\"\n                name=\"SAML\"\n                value={saml}\n                autoFocus\n                rowsMax={4}\n                multiline\n                style={{\n                  fontFamily: \"Monospace\",\n                  fontSize: \"1vmin\"\n                }}\n                onChange={handleSAMLChange}\n              />\n\n              {/* Error Message for JWT String Decode */}\n              <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                  vertical: \"center\",\n                  horizontal: \"center\"\n                }}\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\"\n                }}\n              >\n                <Typography className={classes.errorMessage}>\n                  {samlError}\n                </Typography>\n              </Popover>\n            </Grid>\n            <Grid item xs={12} style={{ flex: \"1 0 auto\" }}>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n              >\n                Decode\n              </Button>\n            </Grid>\n            <Grid item xs={12} style={{ flex: \"10 0 auto\" }}>\n              <Typography component=\"h5\" variant=\"h5\" align=\"left\">\n                Deflated XML{\" \"}\n                <Typography variant=\"body1\" style={{ display: \"inline-flex\" }}>\n                  (base64 decoded, uri decoded)\n                </Typography>\n              </Typography>\n              <Box\n                border={1}\n                borderRadius={5}\n                borderColor=\"#576877\"\n                height=\"100%\"\n                minHeight=\"10vh\"\n                maxWidth=\"100%\"\n                marginBottom=\".5rem\"\n                padding=\"0\"\n                textAlign=\"left\"\n              >\n                <Typography\n                  variant=\"body1\"\n                  fontFamily=\"Monospace\"\n                  style={{\n                    fontSize: \".75rem\",\n                    whiteSpace: \"wrap\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\"\n                  }}\n                >\n                  {deflatedSaml ? deflatedSaml : \"\"}\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12} style={{ flex: \"10 0 auto\" }}>\n              <Typography component=\"h5\" variant=\"h5\" align=\"left\">\n                Decoded SAML{\" \"}\n                <Typography variant=\"body1\" style={{ display: \"inline-flex\" }}>\n                  ( utf8->utf16, inflated, base64 decoded, uri decoded)\n                </Typography>\n              </Typography>\n              <Box\n                border={1}\n                borderRadius={5}\n                borderColor=\"#576877\"\n                height=\"100%\"\n                width=\"100%\"\n                maxWidth=\"100%\"\n                minHeight=\"20vh\"\n                fontSize=\"1rem\"\n              >\n                {decodedSaml ? (\n                  <SyntaxHighlighter\n                    language=\"xml\"\n                    style={docco}\n                    customStyle={{ marginTop: \"0\" }}\n                  >\n                    {decodedSaml}\n                  </SyntaxHighlighter>\n                ) : (\n                  \"\"\n                )}\n              </Box>\n            </Grid>\n          </form>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}